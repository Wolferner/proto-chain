import chalk from 'chalk';
import fs from 'node:fs';
import os from 'node:os';
import path from 'node:path';
import { stdin as input, stdout as output } from 'node:process';
import readline from 'node:readline';

// üóÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏
const HISTORY_FILE = path.join(os.homedir(), '.proto_chain_cli_history');
const MAX_HISTORY = 1000;

// üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
let history: string[] = [];
try {
  if (fs.existsSync(HISTORY_FILE)) {
    history = fs.readFileSync(HISTORY_FILE, 'utf-8').split('\n').filter(Boolean).reverse(); // –ø–æ—Ä—è–¥–æ–∫ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫ –ø–µ—Ä–≤—ã–º (readline –æ–∂–∏–¥–∞–µ—Ç —Ç–∞–∫)
  }
} catch (err) {
  console.error(chalk.red('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:'), err instanceof Error ? err.message : 'Unknown error');
}

// üü¶ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
console.clear();
console.log(chalk.blueBright('üî∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ REPL-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π!'));
console.log(chalk.green('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (help ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥):\n'));

// üìò –°–æ–∑–¥–∞–Ω–∏–µ REPL-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const rl = readline.createInterface({
  input,
  output,
  history, // –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
  prompt: chalk.cyan('> '),
  historySize: MAX_HISTORY,
  removeHistoryDuplicates: true,
});

rl.prompt();

// üîÅ –û—Å–Ω–æ–≤–Ω–æ–π REPL-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
rl.on('line', line => {
  const input = line.trim();
  const [command, ...args] = input.split(/\s+/);

  switch (command) {
    case 'sum': {
      const [a, b] = args.map(Number);
      if (isNaN(a) || isNaN(b)) {
        console.log(chalk.red('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–≤–∞ —á–∏—Å–ª–∞.'));
      } else {
        const result = (a + b).toString();
        console.log(chalk.green(`‚úÖ –°—É–º–º–∞: ${result}`));
      }
      break;
    }

    case 'help': {
      console.log(chalk.yellow('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:'));
      console.log(chalk.yellow('  sum <a> <b>') + ' ‚Äî –°–ª–æ–∂–∏—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞');
      console.log(chalk.yellow('  exit, quit') + ' ‚Äî –í—ã–π—Ç–∏ –∏–∑ REPL');
      console.log(chalk.yellow('  help') + ' ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n');
      break;
    }

    case 'exit':
    case 'quit': {
      console.log(chalk.blue('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'));
      rl.close();
      return;
    }

    case '': {
      // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä
      break;
    }

    default: {
      console.log(chalk.gray(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`));
      break;
    }
  }

  rl.prompt();
});

rl.on('history', lastHistory => {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª
  try {
    const deduplicated = [...new Set(lastHistory.slice().reverse())];
    const trimmed = deduplicated.slice(-MAX_HISTORY).join('\n') + '\n';
    fs.writeFileSync(HISTORY_FILE, trimmed, 'utf-8');
  } catch (err) {
    console.error(chalk.red('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:'), err instanceof Error ? err.message : 'Unknown error');
  }
});

// üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è REPL ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
rl.on('close', () => {
  process.exit(0);
});
